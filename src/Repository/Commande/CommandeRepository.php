<?php

namespace App\Repository\Commande;

use App\Entity\Commande\Commande;
use App\Entity\Commerce\Commerce;
use App\Entity\InterfaceDef\CommandeInterface;
use App\Entity\InterfaceDef\CommerceInterface;
use App\Entity\Security\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\NonUniqueResultException;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * CommandeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommandeRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Commande::class);
    }

    /**
     * @param $args
     * @return CommandeInterface[]|mixed
     */
    public function search($args)
    {
        $qb = $this->createQueryBuilder('commande');
        $qb->leftJoin('commande.commerce', 'commerce', 'WITH');
        $qb->leftJoin('commande.commande_produits', 'commandeProduits', 'WITH');
        $qb->leftJoin('commandeProduits.produit', 'produits', 'WITH');
        $qb->leftJoin('produits.supplements', 'supplements', 'WITH');

        $qb->addSelect(
            'commandeProduits',
            'commerce',
            'produits',
            'supplements'
        );

        //foo = bar ?: baz;
        $idCommande = isset($args['idcommande']) ? $args['idcommande'] : null;
        $user = isset($args['user']) ? $args['user'] : null;
        $commerce = isset($args['commerce']) ? $args['commerce'] : null;
        $commerces = isset($args['commerces']) ? $args['commerces'] : null;

        $paye = isset($args['paye']) ? $args['paye'] : 2;// default=all
        $livre = isset($args['livre']) ? $args['livre'] : 2;// default=all
        $valide = isset($args['valide']) ? $args['valide'] : 2;// default=all

        $date = isset($args['date']) ? $args['date'] : null;
        $lieu_livraison = isset($args['lieu_livraison']) ? $args['lieu_livraison'] : null;
        $one = isset($args['one']) ? $args['one'] : null;

        if ($user) {
            $username = $user instanceof User ? $user->getUsername() : $user;
            $qb->andWhere('commande.user = :username')
                ->setParameter('username', $username);
        }

        if ($idCommande) {
            $qb->andWhere('commande.id = :id')
                ->setParameter('id', $idCommande);
        }

        if ($commerce) {
            $qb->andWhere('commerce = :commerce')
                ->setParameter('commerce', $commerce);
        }

        /**
         * a cause form search a todo
         */
        if ($commerces) {
            $qb->andWhere('commerce = :commerce')
                ->setParameter('commerce', $commerces);
        }

        if ($lieu_livraison) {
            $qb->andWhere('commande.lieu_l2ivraison = :lieu')
                ->setParameter('lieu', $lieu_livraison);
        }

        switch ($valide) {
            case 1:
                $qb->andWhere('commande.valide = :valide')
                    ->setParameter('valide', 1);
                break;
            case 0:
                $qb->andWhere('commande.valide = :valide')
                    ->setParameter('valide', 0);
                break;
            default:
                //on prend tout
                break;
        }

        switch ($paye) {
            case 1:
                $qb->andWhere('commande.paye = :paye')
                    ->setParameter('paye', 1);
                break;
            case 0:
                $qb->andWhere('commande.paye = :paye')
                    ->setParameter('paye', 0);
                break;
            default:
                //on prend tout
                break;
        }

        switch ($livre) {
            case 1:
                $qb->andWhere('commande.livre = :livre')
                    ->setParameter('livre', 1);
                break;
            case 0:
                $qb->andWhere('commande.livre = :livre')
                    ->setParameter('livre', 0);
                break;
            default:
                //on prend tout
                break;
        }

        if ($date instanceof \DateTime) {
            $qb->andWhere('commande.created LIKE :create')
                ->setParameter('create', $date->format('Y-m-d').'%');
        }

        $query = $qb->getQuery();

        if ($one) {
            try {
                return $query->getOneOrNullResult();
            } catch (NonUniqueResultException $exception) {
               // throw new \Exception('Pas unique');
                return [];
            }
        }

        return $query->getResult();
    }

    /**
     * Un panier est compose de commandes non payees
     *
     * User = null pour non connecte
     * @param User|null $user
     * @param CommerceInterface|null $commerce
     * @return CommandeInterface[]
     */
    public function getPanier(User $user = null, CommerceInterface $commerce = null)
    {
        if (!$user) {
            return [];
        }

        $args = [
            'user' => $user,
            'paye' => 0,
        ];

        if ($commerce) {
            $args['commerce'] = $commerce;
            $args['one'] = true;
        }

        return $this->search($args);
    }

    /**
     * Commande :
     *      non payee
     *      suivant le user
     *      suivant le commerce
     *
     * @param User|null $user
     * @param CommerceInterface $commerce
     * @return Commande[]|null
     */
    public function commandeExistPanier(User $user = null, CommerceInterface $commerce)
    {
        $args = [
            'paye' => 0,
            'user' => $user,
            'commerce' => $commerce,
            'one' => true,
        ];

        return $this->search($args);
    }

    /**
     * commande a valider (pour les non food)
     * @param User $user
     * @return Commande[]
     */
    public function getCommandeAValider(User $user = null)
    {
        $args = [
            'paye' => 1,
            'livre' => 0,
        ];

        $em = $this->getEntityManager();
        $commerces = $em->getRepository(Commerce::class)->getCommercesOwnedByUser(
            $user
        );

        if (!$commerces) {
            return [];
        }

        $args['commerce'] = $commerces;

        return $this->search($args);
    }

    /**
     * commande a livrer
     * $commerces = null pour logisiticien
     * $commerces = [] pour filtrer sur les commerces
     * @param $commerces
     * @return array|mixed
     */
    public function getCommandeALivrer($commerces = null)
    {
        $args = [
            'paye' => 1,
            'livre' => 0,
        ];

        if ($commerces) {
            $args['commerce'] = $commerces;
        }

        return $this->search($args);
    }

    /**
     *
     * @param User|null $user
     * @return array|mixed
     */
    public function getCommandeALivrerByCommerce(User $user = null)
    {
        $em = $this->getEntityManager();
        $commerces = $em->getRepository(Commerce::class)->getCommercesOwnedByUser(
            $user
        );

        if (!$commerces) {
            return [];
        }

        return $this->getCommandeALivrer($commerces);
    }

    /**
     * @param User $user
     * @return Commande[]
     */
    public function getCommandesForCommerce22(User $user)
    {
        $args = [
            'paye' => 1,
        ];

        $em = $this->getEntityManager();
        $commerces = $em->getRepository(Commerce::class)->getCommercesOwnedByUser(
            $user
        );

        if (!$commerces) {
            return [];
        }

        $args['commerce'] = $commerces;

        return $this->search($args);
    }

    /**
     * @param User $user
     * @return Commande[]
     */
    public function getArchiveForCommerce22(User $user)
    {
        $args = [
            'paye' => 1,
            'livre' => 1,
        ];

        $em = $this->getEntityManager();
        $commerces = $em->getRepository(Commerce::class)->getCommercesOwnedByUser(
            $user
        );

        if (!$commerces) {
            return [];
        }

        $args['commerce'] = $commerces;

        return $this->search($args);
    }

    /**
     * Pour la commande cleancommande
     * @param \DateTime $date
     * @return Commande[]
     */
    public function getCommandeObsolete(\DateTime $date)
    {
        $date->modify('+15D');
        $args = ['date' => $date];

        return $this->search($args);
    }
}
