<?php

namespace App\Repository\Commerce;

use App\Entity\Commerce\Commerce;
use App\Entity\Security\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * CommerceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommerceRepository extends ServiceEntityRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Commerce::class);
    }

    /**
     * @param $args
     * @return Commerce[]
     */
    public function search($args)
    {
        $qb = $this->createQueryBuilder('commerce');
        $qb->leftJoin('commerce.produits', 'produits', 'WITH');
        $qb->leftJoin('commerce.commandes', 'commandes', 'WITH');
        $qb->leftJoin('commerce.ingredients', 'ingredients', 'WITH');

        $qb->addSelect('produits', 'commandes', 'ingredients');

        $motclef = isset($args['motclef']) ? $args['motclef'] : null;
        $user = isset($args['user']) ? $args['user'] : null;
        $indisponible = isset($args['indisponible']) ? $args['indisponible'] : false;
        $nom = isset($args['nom']) ? $args['nom'] : null;
        $rand = isset($args['rand']) ? $args['rand'] : false;

        if ($motclef) {
            $qb->andWhere('commerce.nom LIKE :clef')
                ->setParameter('clef', '%'.$motclef.'%');
        }

        if ($user) {
            $qb->andWhere('commerce.user = :user')
                ->setParameter('user', $user);
        }

        if ($indisponible === true) {
            $qb->andWhere('commerce.indisponible = :indisponible')
                ->setParameter('indisponible', true);
        } elseif ($indisponible != 2) {
            //on prend tout
        } else {
            $qb->andWhere('commerce.indisponible = :indisponible')
                ->setParameter('indisponible', false);
        }

        if ($nom) {
            $qb->andWhere('commerce.nom LIKE :nom')
                ->setParameter('nom', $nom);
        }

        if ($rand) {
            $qb->addSelect('RAND() as HIDDEN rand')
                ->addOrderBy('rand');
        } else {
            $qb->addOrderBy('commerce.nom');
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param Commerce $commerce
     * @return Commerce|Null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getNext(Commerce $commerce)
    {
        $qb = $this->createQueryBuilder('commerce');

        $qb->andWhere('commerce.nom > :nom')
            ->setParameter('nom', $commerce->getNom());

        $qb->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param Commerce $commerce
     * @return Commerce|Null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getPrevious(Commerce $commerce)
    {
        $qb = $this->createQueryBuilder('commerce');

        $qb->andWhere('commerce.nom < :nom')
            ->setParameter('nom', $commerce->getNom());

        $qb->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Pour remplir select du form
     * @return array
     */
    public function getForSearch(User $user = null)
    {
        $qb = $this->createQueryBuilder('commerce');

        if ($user) {
            $qb->andWhere('commerce.user = :user')
                ->setParameter('user', $user->getUsername());
        }

        $qb->andWhere('commerce.indisponible = :indispo')
            ->setParameter('indispo', false);

        $qb->orderBy('commerce.nom');
        $query = $qb->getQuery();

        $results = $query->getResult();
        $commerces = array();

        foreach ($results as $commerce) {
            $commerces[$commerce->getNom()] = $commerce->getId();
        }

        return $commerces;
    }

    /**
     * @param User $user
     * @return Commerce[]
     */
    public function getCommercesOwnedByUser(User $user)
    {
        $commerces = $this->findBy(
            [
                'user' => $user->getUsername(),
            ]
        );

        if (!$commerces) {
            return [];
        }

        return $commerces;
    }

}
